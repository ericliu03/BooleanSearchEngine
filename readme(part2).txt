For this part, I added two ways to compute the ranking score in function ‘get_score’ in class ‘SearchEngine’, including raw term frequency, vector space and tf-idf score. And in both function ‘search’ and ‘get_score’, I added a parameter called ‘score_com’ to control the way of the score being computed.
In order to using vector space model, I added method to compute and store a key value pair of each document’s magnitude in the doc_data dictionary, which is in function ‘build_doc_dic’ in class ‘DatabaseBuilder’.
In addition, I found that in function ‘build_term_dic’ of class ’DatabaseBuilder’, I used to use ‘if key in dic.iterkeys()’ to check whether the term exists or not, apparently a mistake approach. After revised to ‘if key in dic’ the building time of the whole database reduced to about 10 seconds (from 4 minutes).
Another thing I want to specify is that if the parameter of class DatabaseBuilder is not provided, it will automatically search for file ‘BooleanSearch.db’ to get the database. But if the parameter of class SearchEngine is not given, it will call the DatabaseBuilder to build a new database from file ‘wiki_all.txt’ (default). So if you want to build a search engine from another Json file, you need to give the file name to class DatabaseBuilder to create a new database instance, then give it to class SearchEngine to create a search engine instance for searching.